Index: mainDetailed.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import bluepyopt as bpopt\nimport bluepyopt.ephys as ephys\nimport matplotlib.pyplot as plt\n\nplotMorpho=False\nplotResponses=True\nshowResponses=True\nverbose=False\noffspringSize=50\nmaxGenerations=20\n\nmorphoFile = './morphology/threeCompartmental.swc' # threeCompartmental\n# threeCompartmental characteristics\n# Soma surface area: 1256.6370614359173 um**2\n# Neuron surface area: 4932.3004661359755 um**2\n\n\nworkDir = './config_3Comp/'\n# mechanismOriginal = ['NaTs', 'Nap', 'Kv3_1', 'K_T', 'K_P', 'Ih', 'Im', 'Ca_HVA', 'Ca_LVA', 'SK']\n# mechanismSelected = ['Nafx', 'Nap', 'kdrin', 'K_T', 'K_P', 'Ih', 'Im', 'Ca_HVA', 'Ca_LVA', 'SK']\nmechanismSelected = ['NaV', 'Kv3_1']\n\nif plotMorpho:\n    import neurom\n    from neurom.view import plot_morph, plot_morph3d\n    plot_morph3d(neurom.load_morphology(morphoFile)) #\n    plt.show()\n\n    from neurom import features\n    import numpy as np\n    m = neurom.load_morphology(morphoFile)\n    SomaSurf = features.get('soma_surface_area', m)\n    NeuritesSurf = np.sum(features.get('total_area_per_neurite', m))\n    print(features.get('total_area_per_neurite', m),features.get('total_length_per_neurite', m))\n    print(\"Soma surface area: \" + str(SomaSurf) + \" um^2\", '\\n', \"Neuron surface area: \" + str(SomaSurf+NeuritesSurf) + \" um^2\")\n    quit()\nmorphology = ephys.morphologies.NrnFileMorphology(morphology_path=morphoFile, do_replace_axon=True)\n\nimport json\nparam_configs = json.load(open(workDir+'parameters.json'))\nif verbose: print([param_config['param_name'] for param_config in param_configs])\n\nimport l5pc_model\nparameters = l5pc_model.define_parameters(mechanismSelected=mechanismSelected)\nif verbose: print('\\n'.join('%s' % param for param in parameters))\n\nmechanisms = l5pc_model.define_mechanisms(mechanismSelected=mechanismSelected)\nif verbose: print('\\n'.join('%s' % mech for mech in mechanisms))\n\nl5pc_cell = ephys.models.CellModel('l5pc', morph=morphology, mechs=mechanisms, params=parameters)\nif verbose: print(l5pc_cell)\n\nparam_names = [param.name for param in l5pc_cell.params.values() if not param.frozen]\n\nproto_configs = json.load(open(workDir+'protocols.json'))\nif verbose: print(proto_configs)\n\nimport l5pc_evaluator\nfitness_protocols = l5pc_evaluator.define_protocols()\nif verbose: print('\\n'.join('%s' % protocol for protocol in fitness_protocols.values()))\n\nfeature_configs = json.load(open(workDir+'features.json'))\nif verbose: print(feature_configs)\n\nfitness_calculator = l5pc_evaluator.define_fitness_calculator(fitness_protocols)\nif verbose: print(fitness_calculator)\n\nsim = ephys.simulators.NrnSimulator()\n\nevaluator = ephys.evaluators.CellEvaluator(\n        cell_model=l5pc_cell,\n        param_names=param_names,\n        fitness_protocols=fitness_protocols,\n        fitness_calculator=fitness_calculator,\n        sim=sim)\n\ndef plot_responses(responses, filename='./figures/optResults/responses.png'):\n    fig, axes = plt.subplots(len(responses), figsize=(10,8))\n    for index, (resp_name, response) in enumerate(responses.items()):\n        axes[index].plot(response['time'], response['voltage'], label=resp_name)\n        axes[index].set_title(resp_name)\n    fig.tight_layout()\n    fig.savefig(filename)\n\nopt = bpopt.deapext.optimisationsCMA.DEAPOptimisationCMA(\n    evaluator=evaluator,\n    offspring_size=offspringSize,\n    selector_name=\"multi_objective\") #single_objective multi_objective\n\nfinal_pop, halloffame, log, hist = opt.run(max_ngen=maxGenerations, cp_filename='checkpoints/checkpoint.pkl')\n\nfor i in range(len(halloffame)):\n    best_params = evaluator.param_dict(halloffame[i])\n    print('Best %d solution: \\n' % i + str(best_params))\n\n    best_responses = evaluator.run_protocols(protocols=fitness_protocols.values(), param_values=best_params)\n    if plotResponses:\n        plot_responses(best_responses, filename='./figures/optResults/Best_responses_%i.png' % i)\n        if showResponses: plt.show()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mainDetailed.py b/mainDetailed.py
--- a/mainDetailed.py	(revision b902d02622d9bbc09323f384f1948ceec44b0732)
+++ b/mainDetailed.py	(date 1731945991566)
@@ -2,7 +2,7 @@
 import bluepyopt.ephys as ephys
 import matplotlib.pyplot as plt
 
-plotMorpho=False
+plotMorpho=True
 plotResponses=True
 showResponses=True
 verbose=False
